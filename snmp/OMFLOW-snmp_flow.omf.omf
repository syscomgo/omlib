[{"app_name":"vmware應用","app_attr":"lib","language_package":"{\"zh-hant\": {\"vmware\\u61c9\\u7528\": \"\", \"add_disk_to_vm\": \"VM \\u65b0\\u589e\\u984d\\u5916\\u786c\\u789f\", \"\\u958b\\u59cb\": \"\", \"vCenter domain/IP\": \"\", \"vCenter Port\": \"\", \"vCenter \\u767b\\u5165\\u5e33\\u865f\": \"\", \"vCenter \\u767b\\u5165\\u5bc6\\u78bc\": \"\", \"vCenter VM\\u540d\\u7a31\": \"\", \"Disk\\u985e\\u578b\\uff1athin/thick\": \"\", \"Disk\\u5bb9\\u91cf\\uff1a\\u55ae\\u4f4d\\u70baGB\": \"\", \"\\u7d50\\u675f\": \"\", \"\\u57f7\\u884c\\u7d50\\u679c\\uff1asuccess / <\\u932f\\u8aa4\\u8a0a\\u606f>\": \"\", \"\\u786c\\u789f\\u7de8\\u865f\": \"\", \"\\u57f7\\u884c\": \"\", \"add_nic_to_vm\": \"VM \\u65b0\\u589e\\u7db2\\u5361\", \"Port-Group \\u540d\\u7a31\": \"\", \"get_vm_info\": \"VM \\u53d6\\u5f97\\u4e00\\u822c\\u8cc7\\u8a0a\", \"VM \\u8def\\u5f91\": \"\", \"VM hostname\": \"\", \"VM \\u8655\\u7406\\u5668\": \"\", \"VM \\u8a18\\u61b6\\u9ad4\": \"\", \"VM \\u786c\\u789f\": \"\", \"VM \\u96fb\\u6e90\\u72c0\\u614b\": \"\", \"VM UUID\": \"\", \"VM ID\": \"\", \"VM IP\\u4f4d\\u5740\": \"\", \"clone_vm\": \"VM \\u7bc4\\u672c\\u4f9b\\u88dd\", \"Name of the VMFolder you wish the VM to be dumped in. If left blank The datacenter VM folder will be used\": \"\", \"vCenter \\u7bc4\\u672c\\u540d\\u7a31\": \"\", \"Name of the Datacenter you wish to use. If omitted, the first datacenter will be used.\": \"\", \"Datastore you wish the VM to end up on If left blank, VM will be put on the same datastore as the template.\": \"\", \"DRS Storagepod) you wish the VM to end up on Will override the datastore-name parameter.\": \"\", \"Name of the cluster you wish the VM to end up on. If left blank the first cluster found will be used.\": \"\", \"Resource Pool to use. If left blank the first resource pool found will be used.\": \"\", \"Name of the opaque network to add to the VM\": \"\", \"vm_operations\": \"VM \\u64cd\\u4f5c\", \"\\u57f7\\u884c\\u52d5\\u4f5c\\uff1aon / off / reboot / delete\": \"\", \"destroy_vm\": \"VM \\u522a\\u9664\", \"cdrom_vm\": \"VM \\u4ecb\\u63a5ISO\", \"ISO to use in test. Use datastore path format. E.g. [datastore1] path/to/file.iso\": \"\", \"Name of datacenter to search on. Defaults to first.\": \"\", \"vm_rename\": \"\", \"vCenter \\u539fVM\\u540d\\u7a31\": \"\", \"vCenter \\u65b0VM\\u540d\\u7a31\": \"\", \"generate_html5_console\": \"VM \\u9060\\u7aef\\u9023\\u7dda\", \"\\u9700\\u81ea\\u884c\\u5b89\\u88dd\\u5957\\u4ef6 pyOpenSSL\": \"\", \"Web Console\": \"\", \"URL - only available 3 minutes\": \"\", \"Result\": \"\", \"VC\": \"\", \"host\": \"\", \"port\": \"\", \"user\": \"\", \"password\": \"\", \"vm_name\": \"\", \"Console \\u7db2\\u5740\": \"\", \"\\u4e26\\u884c\": \"\", \"\\u4eba\\u5de5\\u8f38\\u5165\": \"\", \"scheduled_operations\": \"VM \\u6392\\u7a0b\\u64cd\\u4f5c\", \"\\u57f7\\u884c\\u6642\\u9593\\u683c\\u5f0f\\uff1ad/m/Y H:M\": \"\", \"\\u57f7\\u884c\\u52d5\\u4f5c\\uff1aon / off / reboot\": \"\", \"delete_disk_from_vm\": \"VM \\u522a\\u9664\\u984d\\u5916\\u786c\\u789f\", \"vCenter VM\\u786c\\u789f\\u7de8\\u865f\": \"\", \"upload_file_to_vm\": \"VM \\u4e0a\\u50b3\\u6a94\\u6848\", \"vCenter VM\\u767b\\u5165\\u5e33\\u865f\": \"\", \"vCenter VM\\u767b\\u5165\\u5bc6\\u78bc\": \"\", \"VM\\u4e0a\\u50b3\\u8def\\u5f91\\u4f4d\\u7f6e\\uff1a<\\u8def\\u5f91>\\\\<\\u6a94\\u6848\\u540d\\u7a31>\": \"\", \"\\u672c\\u6a5f\\u6a94\\u6848\\u8def\\u5f91\\uff1a<\\u8def\\u5f91>\\\\<\\u6a94\\u6848\\u540d\\u7a31>\": \"\", \"change_vm_nic_state\": \"VM \\u7db2\\u5361\\u64cd\\u4f5c\", \"vCenter VM\\u7db2\\u5361\\u7de8\\u865f\\u3001\\u4e09\\u64c7\\u4e00\": \"\", \"vCenter VM\\u7db2\\u5361IP\\u3001\\u4e09\\u64c7\\u4e00\": \"\", \"vCenter VM\\u7db2\\u5361mac\\u3001\\u4e09\\u64c7\\u4e00\": \"\", \"\\u57f7\\u884c\\u52d5\\u4f5c\\uff1aconnect / disconnect / delete\": \"\", \"\\u5224\\u65b7\": \"\", \"\\u6d41\\u7a0b\": \"\", \"delete_nic_from_vm\": \"VM \\u7db2\\u5361\\u522a\\u9664\", \"vCenter VM\\u7de8\\u865f\": \"\", \"vCenter VM\\u7db2\\u5361MAC\\u3001\\u4e09\\u64c7\\u4e00\": \"\", \"snapshot_operations\": \"VM \\u5feb\\u7167\\u64cd\\u4f5c\", \"\\u57f7\\u884c\\u52d5\\u4f5c\\uff1acreate/remove/revert/list_all/list_current/remove_all\": \"\", \"\\u5feb\\u7167\\u540d\\u7a31\": \"\", \"get_nic-no_from_vm\": \"VM \\u53d6\\u5f97\\u7db2\\u5361\\u7de8\\u865f\", \"\\u7db2\\u5361IP\\uff0c\\u8207mac\\u4e8c\\u64c7\\u4e00\": \"\", \"\\u7db2\\u5361MAC\\uff0c\\u8207ip\\u4e8c\\u64c7\\u4e00\": \"\", \"\\u7db2\\u5361\\u7de8\\u865f\": \"\", \"vm_capacity\": \"VM \\u5bb9\\u91cf\\u8abf\\u6574\", \"\\u6307\\u5b9a CPU \\u6578\\u91cf\": \"\", \"\\u6307\\u5b9a RAM \\u5bb9\\u91cf (GB)\": \"\", \"\\u6307\\u5b9a \\u786c\\u789f\\u7de8\\u865f\": \"\", \"\\u6307\\u5b9a DISK \\u5bb9\\u91cf (GB)\": \"\"}, \"en\": {\"vmware\\u61c9\\u7528\": \"\"}, \"ja\": {\"vmware\\u61c9\\u7528\": \"\"}, \"zh-hans\": {\"vmware\\u61c9\\u7528\": \"\"}}","flow_list":[{"flow_name":"add_disk_to_vm","description":"","flowobject":{"flow_item_counter":6,"flow_line_counter":8,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":true,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":"thin","name":"disk_type","des":"Disk類型：thin/thick"},{"require":true,"value":null,"name":"disk_size","des":"Disk容量：單位為GB"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"},{"value":"$(disk_no)","name":"$(disk_no)","des":"硬碟編號"}],"calculate":[],"top":200,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":true,"value":"$(host)","name":"host","des":""},{"require":true,"value":"$(port)","name":"port","des":""},{"require":true,"value":"$(user)","name":"user","des":""},{"require":true,"value":"$(password)","name":"password","des":""},{"require":true,"value":"$(vm_name)","name":"vm_name","des":""},{"require":true,"value":"$(disk_type)","name":"disk_type","des":""},{"require":true,"value":"$(disk_size)","name":"disk_size","des":""},{"require":false,"value":null,"name":"unit_number","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""},{"value":"$(unit_number)","name":"$(disk_no)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\"\"\"\nWritten by Dann Bohn\nGithub: https://github.com/whereismyjetpack\nEmail: dannbohn@gmail.com\nScript to add a Hard disk to an existing VM\nThis is for demonstration purposes only.\nI did not do a whole lot of sanity checking, etc.\nKnown issues:\nThis will not add more than 15 disks to a VM\nTo do that the VM needs an additional scsi controller\nand I have not yet worked through that\n\"\"\"\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\nfrom pyVim.connect import SmartConnect, Disconnect\nimport atexit\nimport ssl\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vm_name = vm_name\n    uuid = \"\"\n    disk_type = disk_type\n    disk_size = disk_size\n\n\ndef get_obj(content, vimtype, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\n\ndef add_disk(vm, si, disk_size, disk_type):\n    global result\n    global unit_number\n    spec = vim.vm.ConfigSpec()\n    # get all disks on a VM, set unit_number to the next available\n    for dev in vm.config.hardware.device:\n        if hasattr(dev.backing, 'fileName'):\n            unit_number = int(dev.unitNumber) + 1\n            # unit_number 7 reserved for scsi controller\n            if unit_number == 7:\n                unit_number += 1\n            if unit_number >= 16:\n                result = \"we don't support this many disks\"\n                return\n        if isinstance(dev, vim.vm.device.VirtualSCSIController):\n            controller = dev\n    # add disk here\n    dev_changes = []\n    new_disk_kb = int(disk_size) * 1024 * 1024\n    disk_spec = vim.vm.device.VirtualDeviceSpec()\n    disk_spec.fileOperation = \"create\"\n    disk_spec.operation = vim.vm.device.VirtualDeviceSpec.Operation.add\n    disk_spec.device = vim.vm.device.VirtualDisk()\n    disk_spec.device.backing = \\\n        vim.vm.device.VirtualDisk.FlatVer2BackingInfo()\n    if disk_type == 'thin':\n        disk_spec.device.backing.thinProvisioned = True\n    disk_spec.device.backing.diskMode = 'persistent'\n    disk_spec.device.unitNumber = unit_number\n    disk_spec.device.capacityInKB = new_disk_kb\n    disk_spec.device.controllerKey = controller.key\n    dev_changes.append(disk_spec)\n    spec.deviceChange = dev_changes\n    vm.ReconfigVM_Task(spec=spec)\n    #result = \"%sGB disk added to %s\" % (disk_size, vm.config.name)\n\n\ndef main():\n    global result\n    args = get_args()\n\n    context = None\n    if hasattr(ssl, \"_create_unverified_context\"):\n        context = ssl._create_unverified_context()\n    si = SmartConnect( host=args.host,\n                       user=args.user,\n                       pwd=args.password,\n                       port=args.port,\n                       sslContext=context)\n    # disconnect the service instance at program exit\n    atexit.register(Disconnect, si)\n\n    vm = None\n    if args.uuid:\n        search_index = si.content.searchIndex\n        vm = search_index.FindByUuid(None, args.uuid, True)\n    elif args.vm_name:\n        content = si.RetrieveContent()\n        vm = get_obj(content, [vim.VirtualMachine], args.vm_name)\n\n    if vm:\n        add_disk(vm, si, args.disk_size, args.disk_type)\n    else:\n        result = \"VM not found\"\n\n\nmain()","top":100,"left":210,"collector":null}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}},{"id":"FLINE_MW8","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":8,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}}],"version":16777216,"uid":1599794697466},"config":{"subflow":[],"permission":[],"name":"add_disk_to_vm","description":"","api_path":"add-disk-to-vm","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"add_nic_to_vm","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":true,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":null,"name":"port_group","des":"Port-Group 名稱"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":150,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(port_group)","name":"port_group","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\"\"\"\nWritten by nickcooper-zhangtonghao\nGithub: https://github.com/nickcooper-zhangtonghao\nEmail: nickcooper-zhangtonghao@opencloud.tech\nNote: Example code For testing purposes only\nThis code has been released under the terms of the Apache-2.0 license\nhttp://opensource.org/licenses/Apache-2.0\n\"\"\"\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\nfrom pyVim.connect import SmartConnect, SmartConnectNoSSL, Disconnect\nimport atexit\nimport ssl\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vm_name = vm_name\n    uuid = None\n    port_group = port_group\n\ndef get_obj(content, vimtype, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\n\ndef add_nic(si, vm, network_name):\n    \"\"\"\n    :param si: Service Instance\n    :param vm: Virtual Machine Object\n    :param network_name: Name of the Virtual Network\n    \"\"\"\n    spec = vim.vm.ConfigSpec()\n    nic_changes = []\n\n    nic_spec = vim.vm.device.VirtualDeviceSpec()\n    nic_spec.operation = vim.vm.device.VirtualDeviceSpec.Operation.add\n\n    nic_spec.device = vim.vm.device.VirtualE1000()\n\n    nic_spec.device.deviceInfo = vim.Description()\n    nic_spec.device.deviceInfo.summary = 'vCenter API test'\n\n    content = si.RetrieveContent()\n    network = get_obj(content, [vim.Network], network_name)\n    if isinstance(network, vim.OpaqueNetwork):\n        nic_spec.device.backing = \\\n            vim.vm.device.VirtualEthernetCard.OpaqueNetworkBackingInfo()\n        nic_spec.device.backing.opaqueNetworkType = \\\n            network.summary.opaqueNetworkType\n        nic_spec.device.backing.opaqueNetworkId = \\\n            network.summary.opaqueNetworkId\n    else:\n        nic_spec.device.backing = \\\n            vim.vm.device.VirtualEthernetCard.NetworkBackingInfo()\n        nic_spec.device.backing.useAutoDetect = False\n        nic_spec.device.backing.deviceName = network_name #錯這裡\n\n    nic_spec.device.connectable = vim.vm.device.VirtualDevice.ConnectInfo()\n    nic_spec.device.connectable.startConnected = True\n    nic_spec.device.connectable.allowGuestControl = True\n    nic_spec.device.connectable.connected = False\n    nic_spec.device.connectable.status = 'untried'\n    nic_spec.device.wakeOnLanEnabled = True\n    nic_spec.device.addressType = 'assigned'\n\n    nic_changes.append(nic_spec)\n    spec.deviceChange = nic_changes\n    e = vm.ReconfigVM_Task(spec=spec)\n    #message = \"NIC CARD ADDED\"\n\n\ndef main():\n    global result\n    args = get_args()\n    context = None\n    if hasattr(ssl, \"_create_unverified_context\"):\n        context = ssl._create_unverified_context()\n    serviceInstance = SmartConnect( host=args.host,\n                       user=args.user,\n                       pwd=args.password,\n                       port=args.port,\n                       sslContext=context)\n    # disconnect the service instance at program exit\n    atexit.register(Disconnect, serviceInstance)\n    \n    vm = None\n    if args.uuid:\n        search_index = serviceInstance.content.searchIndex\n        vm = search_index.FindByUuid(None, args.uuid, True)\n    elif args.vm_name:\n        content = serviceInstance.RetrieveContent()\n        vm = get_obj(content, [vim.VirtualMachine], args.vm_name)\n\n    if vm:\n        add_nic(serviceInstance, vm, args.port_group)\n    else:\n        result = \"VM not found\"\n\nmain()","top":75,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":87.5,"linebox_long":0,"linebox_top_width":7.5,"linebox_bottom_width":-7.5,"linebox_arrow_top":85,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":162.5,"linebox_long":0,"linebox_top_width":7.5,"linebox_bottom_width":-7.5,"linebox_arrow_top":160,"linebox_arrow_left":266}}],"version":16777216,"uid":1599794822640},"config":{"subflow":[],"permission":[],"name":"add_nic_to_vm","description":"","api_path":"add-nic-to-vm","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"get_vm_info","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"},{"value":"$(vm_path)","name":"$(vm_path)","des":"VM 路徑"},{"value":"$(vm_guest)","name":"$(vm_guest)","des":"VM hostname"},{"value":"$(vm_cpu)","name":"$(vm_cpu)","des":"VM 處理器"},{"value":"$(vm_ram)","name":"$(vm_ram)","des":"VM 記憶體"},{"value":"$(vm_disk)","name":"$(vm_disk)","des":"VM 硬碟"},{"value":"$(vm_state)","name":"$(vm_state)","des":"VM 電源狀態"},{"value":"$(vm_uuid)","name":"$(vm_uuid)","des":"VM UUID"},{"value":"$(vm_id)","name":"$(vm_id)","des":"VM ID"},{"value":"$(vm_ip)","name":"$(vm_ip)","des":"VM IP位址"}],"calculate":[],"top":275,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":null,"name":"vm_uuid","des":""},{"require":false,"value":null,"name":"vm_path","des":""},{"require":false,"value":null,"name":"vm_guest","des":""},{"require":false,"value":null,"name":"vm_cpu","des":""},{"require":false,"value":null,"name":"vm_ram","des":""},{"require":false,"value":null,"name":"vm_disk","des":""},{"require":false,"value":null,"name":"vm_state","des":""},{"require":false,"value":null,"name":"vm_ip","des":""},{"require":false,"value":null,"name":"vm_id","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""},{"value":"$(vm_uuid)","name":"$(vm_uuid)","des":""},{"value":"$(vm_path)","name":"$(vm_path)","des":""},{"value":"$(vm_guest)","name":"$(vm_guest)","des":""},{"value":"$(vm_cpu)","name":"$(vm_cpu)","des":""},{"value":"$(vm_ram)","name":"$(vm_ram)","des":""},{"value":"$(vm_disk)","name":"$(vm_disk)","des":""},{"value":"$(vm_state)","name":"$(vm_state)","des":""},{"value":"$(vm_ip)","name":"$(vm_ip)","des":""},{"value":"$(vm_id)","name":"$(vm_id)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n# VMware vSphere Python SDK\n# Copyright (c) 2008-2013 VMware, Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nPython program for listing the vms on an ESX / vCenter host\n\"\"\"\n\nimport re\nimport atexit\nimport ssl\nfrom pyVim.connect import SmartConnect, Disconnect\nfrom pyVmomi import vmodl\nfrom pyVmomi import vim\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vm_name = vm_name\n\ndef print_vm_info(virtual_machine):\n    \"\"\"\n    Print information for a particular virtual machine or recurse into a\n    folder with depth protection\n    \"\"\"\n    global vm_id\n    global vm_uuid\n    global vm_path\n    global vm_guest\n    global vm_cpu\n    global vm_ram\n    global vm_disk\n    global vm_state\n    global vm_ip\n    \n    summary = virtual_machine.summary\n    vm_id = re.findall(\":(.+)'\",str(virtual_machine))[0]\n    vm_uuid = summary.config.uuid\n    vm_path = summary.config.vmPathName\n    vm_guest = summary.config.guestFullName\n    vm_cpu = summary.config.numCpu\n    vm_ram = summary.config.memorySizeMB\n    vm_disk = 0\n    for device in virtual_machine.config.hardware.device:\n       if type(device).__name__ == 'vim.vm.device.VirtualDisk':\n           vm_disk = vm_disk + device.capacityInKB\n    vm_disk = vm_disk/1024/1024\n    vm_state = summary.runtime.powerState\n    \n    annotation = summary.config.annotation\n    if annotation:\n        print(\"Annotation : \", annotation)\n\n    if summary.guest is not None:\n        ip_address = summary.guest.ipAddress\n        tools_version = summary.guest.toolsStatus\n        if tools_version is not None:\n            print(\"VMware-tools: \", tools_version)\n        else:\n            print(\"Vmware-tools: None\")\n        if ip_address:\n            print(\"IP         : \", ip_address)\n            vm_ip = ip_address\n        else:\n            print(\"IP         : None\")\n    if summary.runtime.question is not None:\n        print(\"Question  : \", summary.runtime.question.text)\n\ndef main():\n    \"\"\"\n    Simple command-line program for listing the virtual machines on a system.\n    \"\"\"\n    global result\n    args = get_args()\n\n    try:\n        context = None\n        if hasattr(ssl, \"_create_unverified_context\"):\n            context = ssl._create_unverified_context()\n        serviceInstance = SmartConnect( host=args.host,\n                           user=args.user,\n                           pwd=args.password,\n                           port=args.port,\n                           sslContext=context)\n        # disconnect the service instance at program exit\n        atexit.register(Disconnect, serviceInstance)\n\n        content = serviceInstance.RetrieveContent()\n\n        container = content.rootFolder  # starting point to look into\n        viewType = [vim.VirtualMachine]  # object types to look for\n        recursive = True  # whether we should look into it recursively\n        containerView = content.viewManager.CreateContainerView(\n            container, viewType, recursive)\n\n        children = containerView.view\n        #if args.find is not None:\n            #pat = re.compile(args.find, re.IGNORECASE)\n        #for child in children:\n            #if args.vm is None:\n                #print_vm_info(child)\n            #else:\n                #if pat.search(child.summary.config.name) is not None:\n                    #print_vm_info(child)\n        for child in children:\n            if args.vm_name == child.summary.config.name:\n                print_vm_info(child)\n                break\n                \n    except vmodl.MethodFault as error:\n        print(error.msg)\n        result = \"Caught vmodl fault : \" + error.msg\n        return -1\n\n    return 0\n\nmain()","top":150,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":125,"linebox_long":0,"linebox_top_width":45,"linebox_bottom_width":-45,"linebox_arrow_top":160,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":262.5,"linebox_long":0,"linebox_top_width":32.5,"linebox_bottom_width":-32.5,"linebox_arrow_top":285,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049258421},"config":{"subflow":[],"permission":[],"name":"get_vm_info","description":"","api_path":"get-vm-info","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"clone_vm","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":"None","name":"vm_folder","des":"Name of the VMFolder you wish the VM to be dumped in. If left blank The datacenter VM folder will be used"},{"require":true,"value":null,"name":"template","des":"vCenter 範本名稱"},{"require":true,"value":"None","name":"datacenter_name","des":"Name of the Datacenter you wish to use. If omitted, the first datacenter will be used."},{"require":true,"value":"None","name":"datastore_name","des":"Datastore you wish the VM to end up on If left blank, VM will be put on the same datastore as the template."},{"require":true,"value":"None","name":"datastorecluster_name","des":"DRS Storagepod) you wish the VM to end up on Will override the datastore-name parameter."},{"require":true,"value":"None","name":"cluster_name","des":"Name of the cluster you wish the VM to end up on. If left blank the first cluster found will be used."},{"require":true,"value":"None","name":"resource_pool","des":"Resource Pool to use. If left blank the first resource pool found will be used."},{"require":true,"value":"None","name":"opaque_network","des":"Name of the opaque network to add to the VM"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"top":275,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(template)","name":"template","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(datacenter_name)","name":"datacenter_name","des":""},{"require":false,"value":"$(datastore_name)","name":"datastore_name","des":""},{"require":false,"value":"$(datastorecluster_name)","name":"datastorecluster_name","des":""},{"require":false,"value":"$(cluster_name)","name":"cluster_name","des":""},{"require":false,"value":"$(resource_pool)","name":"resource_pool","des":""},{"require":false,"value":"$(opaque_network)","name":"opaque_network","des":""},{"require":false,"value":"$(vm_folder)","name":"vm_folder","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\"\"\"\nWritten by Dann Bohn\nGithub: https://github.com/whereismyjetpack\nEmail: dannbohn@gmail.com\nClone a VM from template example\n\"\"\"\nfrom pyVmomi import vim\nfrom pyVim.connect import SmartConnect, SmartConnectNoSSL, Disconnect\nimport atexit\nimport ssl\n\nclass get_args:\n    host = host\n    port = port\n    user = user\n    password = password\n    vm_name = vm_name\n    uuid = \"\"\n    template = template\n    datacenter_name = None if datacenter_name in [\"None\"] else datacenter_name\n    vm_folder = None if vm_folder in [\"None\"] else vm_folder\n    datastore_name = None if datastore_name in [\"None\"] else datastore_name\n    datastorecluster_name = None if datastorecluster_name in [\"None\"] else datastorecluster_name\n    cluster_name = None if cluster_name in [\"None\"] else cluster_name\n    resource_pool = None if resource_pool in [\"None\"] else resource_pool\n    power_on = False\n    opaque_network = None if opaque_network in [\"None\"] else opaque_network\n\ndef wait_for_task(task):\n    \"\"\" wait for a vCenter task to finish \"\"\"\n    global result\n    task_done = False\n    while not task_done:\n        if task.info.state == 'success':\n            return task.info.result\n\n        if task.info.state == 'error':\n            result = \"there was an error\"\n            task_done = True\n\n\ndef get_obj(content, vimtype, name):\n    \"\"\"\n    Return an object by name, if name is None the\n    first found object is returned\n    \"\"\"\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if name:\n            if c.name == name:\n                obj = c\n                break\n        else:\n            obj = c\n            break\n\n    return obj\n\ndef add_nic(si, vm, network_name):\n    \"\"\"\n    :param si: Service Instance\n    :param vm: Virtual Machine Object\n    :param network_name: Name of the Virtual Network\n    \"\"\"\n    spec = vim.vm.ConfigSpec()\n    nic_changes = []\n\n    nic_spec = vim.vm.device.VirtualDeviceSpec()\n    nic_spec.operation = vim.vm.device.VirtualDeviceSpec.Operation.add\n\n    nic_spec.device = vim.vm.device.VirtualE1000()\n\n    nic_spec.device.deviceInfo = vim.Description()\n    nic_spec.device.deviceInfo.summary = 'vCenter API test'\n\n    content = si.RetrieveContent()\n    network = get_obj(content, [vim.Network], network_name)\n    if isinstance(network, vim.OpaqueNetwork):\n        nic_spec.device.backing = \\\n            vim.vm.device.VirtualEthernetCard.OpaqueNetworkBackingInfo()\n        nic_spec.device.backing.opaqueNetworkType = \\\n            network.summary.opaqueNetworkType\n        nic_spec.device.backing.opaqueNetworkId = \\\n            network.summary.opaqueNetworkId\n    else:\n        nic_spec.device.backing = \\\n            vim.vm.device.VirtualEthernetCard.NetworkBackingInfo()\n        nic_spec.device.backing.useAutoDetect = False\n        nic_spec.device.backing.deviceName = network_name #錯這裡\n\n    nic_spec.device.connectable = vim.vm.device.VirtualDevice.ConnectInfo()\n    nic_spec.device.connectable.startConnected = True\n    nic_spec.device.connectable.allowGuestControl = True\n    nic_spec.device.connectable.connected = False\n    nic_spec.device.connectable.status = 'untried'\n    nic_spec.device.wakeOnLanEnabled = True\n    nic_spec.device.addressType = 'assigned'\n\n    nic_changes.append(nic_spec)\n    spec.deviceChange = nic_changes\n    e = vm.ReconfigVM_Task(spec=spec)\n    #message = \"NIC CARD ADDED\"\n\ndef clone_vm(\n        content, template, vm_name, si,\n        datacenter_name, vm_folder, datastore_name,\n        cluster_name, resource_pool, power_on, datastorecluster_name):\n    \"\"\"\n    Clone a VM from a template/VM, datacenter_name, vm_folder, datastore_name\n    cluster_name, resource_pool, and power_on are all optional.\n    \"\"\"\n    \n    # if none git the first one\n    datacenter = get_obj(content, [vim.Datacenter], datacenter_name)\n\n    if vm_folder:\n        destfolder = get_obj(content, [vim.Folder], vm_folder)\n    else:\n        destfolder = datacenter.vmFolder\n\n    if datastore_name:\n        datastore = get_obj(content, [vim.Datastore], datastore_name)\n    else:\n        datastore = get_obj(\n            content, [vim.Datastore], template.datastore[0].info.name)\n\n    # if None, get the first one\n    cluster = get_obj(content, [vim.ClusterComputeResource], cluster_name)\n\n    if resource_pool:\n        resource_pool = get_obj(content, [vim.ResourcePool], resource_pool)\n    else:\n        resource_pool = cluster.resourcePool\n\n    vmconf = vim.vm.ConfigSpec()\n\n    if datastorecluster_name:\n        podsel = vim.storageDrs.PodSelectionSpec()\n        pod = get_obj(content, [vim.StoragePod], datastorecluster_name)\n        podsel.storagePod = pod\n\n        storagespec = vim.storageDrs.StoragePlacementSpec()\n        storagespec.podSelectionSpec = podsel\n        storagespec.type = 'create'\n        storagespec.folder = destfolder\n        storagespec.resourcePool = resource_pool\n        storagespec.configSpec = vmconf\n\n        try:\n            rec = content.storageResourceManager.RecommendDatastores(\n                storageSpec=storagespec)\n            rec_action = rec.recommendations[0].action[0]\n            real_datastore_name = rec_action.destination.name\n        except:\n            real_datastore_name = template.datastore[0].info.name\n\n        datastore = get_obj(content, [vim.Datastore], real_datastore_name)\n\n    # set relospec\n    relospec = vim.vm.RelocateSpec()\n    relospec.datastore = datastore\n    relospec.pool = resource_pool\n\n    clonespec = vim.vm.CloneSpec()\n    clonespec.location = relospec\n    clonespec.powerOn = power_on\n\n    print(\"cloning VM...\")\n    task = template.Clone(folder=destfolder, name=vm_name, spec=clonespec)\n    wait_for_task(task)\n\n\ndef main():\n    \"\"\"\n    Let this thing fly\n    \"\"\"\n    args = get_args()\n    global result\n    # connect this thing\n    context = None\n    if hasattr(ssl, \"_create_unverified_context\"):\n        context = ssl._create_unverified_context()\n    si = SmartConnect( host=args.host,\n                       user=args.user,\n                       pwd=args.password,\n                       port=args.port,\n                       sslContext=context)\n    # disconnect the service instance at program exit\n    atexit.register(Disconnect, si)\n\n    content = si.RetrieveContent()\n    template = None\n\n    template = get_obj(content, [vim.VirtualMachine], args.template)\n\n    if template:\n        clone_vm(\n            content, template, args.vm_name, si,\n            args.datacenter_name, args.vm_folder,\n            args.datastore_name, args.cluster_name,\n            args.resource_pool, args.power_on, args.datastorecluster_name)\n        if args.opaque_network:\n            vm = get_obj(content, [vim.VirtualMachine], args.vm_name)\n            add_nic(si, vm, args.opaque_network)\n    else:\n        result = \"template not found\"\n\n\nmain()","top":125,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":112.5,"linebox_long":0,"linebox_top_width":32.5,"linebox_bottom_width":-32.5,"linebox_arrow_top":135,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":250,"linebox_long":0,"linebox_top_width":45,"linebox_bottom_width":-45,"linebox_arrow_top":285,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049299417},"config":{"subflow":[],"permission":[],"name":"clone_vm","description":"","api_path":"clone-vm","fp_show":true,"attachment":false,"relation":false,"worklog":false,"history":true,"mission":true,"flowlog":true,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"vm_operations","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":"on","name":"action","des":"執行動作：on / off / reboot / delete"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":275,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(action)","name":"action","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"from __future__ import print_function\n\nfrom pyVim.connect import SmartConnect, Disconnect\nfrom pyVmomi import vim, vmodl\n\nimport atexit\nimport sys\nimport ssl\nimport json\n\nclass GetArgs:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vmname = vm_name\n    action = action\n\ndef WaitForTasks(tasks, si):\n    \"\"\"\n    Given the service instance si and tasks, it returns after all the\n    tasks are complete\n    \"\"\"\n\n    pc = si.content.propertyCollector\n\n    taskList = [str(task) for task in tasks]\n\n    # Create filter\n    objSpecs = [vmodl.query.PropertyCollector.ObjectSpec(obj=task)for task in tasks]\n    propSpec = vmodl.query.PropertyCollector.PropertySpec(type=vim.Task,pathSet=[], all=True)\n    filterSpec = vmodl.query.PropertyCollector.FilterSpec()\n    filterSpec.objectSet = objSpecs\n    filterSpec.propSet = [propSpec]\n    filter = pc.CreateFilter(filterSpec, True)\n\n    try:\n        version, state = None, None\n\n        # Loop looking for updates till the state moves to a completed state.\n        while len(taskList):\n            update = pc.WaitForUpdates(version)\n            for filterSet in update.filterSet:\n                for objSet in filterSet.objectSet:\n                    task = objSet.obj\n                    for change in objSet.changeSet:\n                        if change.name == 'info':\n                            state = change.val.state\n                        elif change.name == 'info.state':\n                            state = change.val\n                        else:\n                            continue\n\n                        if not str(task) in taskList:\n                            continue\n\n                        if state == vim.TaskInfo.State.success:\n                        # Remove task from taskList\n                            taskList.remove(str(task))\n                        elif state == vim.TaskInfo.State.error:\n                            raise task.info.error\n            # Move to next version\n            version = update.version\n    finally:\n        if filter:\n            filter.Destroy()\n\n# Start program\ndef main():\n    \"\"\"\n    Simple command-line program for powering on virtual machines on a system.\n    \"\"\"\n    global result\n    args = GetArgs()\n    if args.password:\n        password = args.password\n    else:\n        password = getpass.getpass(prompt='Enter password for host %s and user %s: ' % (args.host,args.user))\n\n    try:\n        vmnames = args.vmname\n        if not len(vmnames):\n            result = \"No virtual machine specified for poweron\"\n            sys.exit()\n\n        context = None\n        if hasattr(ssl, '_create_unverified_context'):\n            context = ssl._create_unverified_context()\n      \n        si = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n      \n        if not si:\n            result = \"Cannot connect to specified host using specified username and password\"\n            sys.exit()\n\n        atexit.register(Disconnect, si)\n\n        # Retreive the list of Virtual Machines from the inventory objects\n        # under the rootFolder\n        content = si.content\n        objView = content.viewManager.CreateContainerView(content.rootFolder,[vim.VirtualMachine],True)\n        vmList = objView.view\n        objView.Destroy()\n\n        # Find the vm and power it on\n        if args.action == 'on':\n            tasks = [vm.PowerOn() for vm in vmList if vm.name in vmnames]\n        elif args.action == 'off':\n            tasks = [vm.ShutdownGuest() for vm in vmList if vm.name in vmnames]\n        elif args.action == 'reboot':\n            tasks = [vm.ResetVM_Task() for vm in vmList if vm.name in vmnames]\n        \n        # Wait for power on to complete\n        WaitForTasks(tasks, si)\n\n        message = \"Virtual Machine(s) have been powered on successfully\"\n    except vmodl.MethodFault as e:\n        result = \"Caught vmodl fault : \" + e.msg\n    except Exception as e:\n        result = \"Caught Exception : \" + str(e)\n\nmain()","top":125,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":112.5,"linebox_long":0,"linebox_top_width":32.5,"linebox_bottom_width":-32.5,"linebox_arrow_top":135,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":250,"linebox_long":0,"linebox_top_width":45,"linebox_bottom_width":-45,"linebox_arrow_top":285,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049351874},"config":{"subflow":[],"permission":[],"name":"vm_operations","description":"","api_path":"vm-operations","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"destroy_vm","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":150,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n# Copyright 2015 Michael Rice <michael@michaelrice.org>\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\nfrom __future__ import print_function\nfrom pyVim.connect import SmartConnect, Disconnect\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\nimport atexit\nimport ssl\n\nclass setup_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    uuid = \"\"\n    name = \"\"\n    vm = vm_name\n\ndef wait_for_tasks(service_instance, tasks):\n    \"\"\"Given the service instance si and tasks, it returns after all the\n    tasks are complete\n    \"\"\"\n    property_collector = service_instance.content.propertyCollector\n    task_list = [str(task) for task in tasks]\n    # Create filter\n    obj_specs = [vmodl.query.PropertyCollector.ObjectSpec(obj=task)\n                 for task in tasks]\n    property_spec = vmodl.query.PropertyCollector.PropertySpec(type=vim.Task,\n                                                               pathSet=[],\n                                                               all=True)\n    filter_spec = vmodl.query.PropertyCollector.FilterSpec()\n    filter_spec.objectSet = obj_specs\n    filter_spec.propSet = [property_spec]\n    pcfilter = property_collector.CreateFilter(filter_spec, True)\n    try:\n        version, state = None, None\n        # Loop looking for updates till the state moves to a completed state.\n        while len(task_list):\n            update = property_collector.WaitForUpdates(version)\n            for filter_set in update.filterSet:\n                for obj_set in filter_set.objectSet:\n                    task = obj_set.obj\n                    for change in obj_set.changeSet:\n                        if change.name == 'info':\n                            state = change.val.state\n                        elif change.name == 'info.state':\n                            state = change.val\n                        else:\n                            continue\n\n                        if not str(task) in task_list:\n                            continue\n\n                        if state == vim.TaskInfo.State.success:\n                            # Remove task from taskList\n                            task_list.remove(str(task))\n                        elif state == vim.TaskInfo.State.error:\n                            raise task.info.error\n            # Move to next version\n            version = update.version\n    finally:\n        if pcfilter:\n            pcfilter.Destroy()  \n\ndef get_obj(content, vimtype, name):\n\n    \"\"\"Create contrainer view and search for object in it\"\"\"\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if name:\n            if c.name == name:\n                obj = c\n                break\n        else:\n            obj = c\n            break\n\n    container.Destroy()\n    return obj\n\nargs = setup_args()\nSI = None\ntry:\n    context = None\n    if hasattr(ssl, '_create_unverified_context'):\n        context = ssl._create_unverified_context()\n  \n    SI = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n  \n    if not SI:\n        result = \"Cannot connect to specified host using specified username and password\"\n        sys.exit()\n\n    atexit.register(Disconnect, SI)\nexcept (IOError, vim.fault.InvalidLogin):\n    pass\n\nif not SI:\n    result = \"Unable to connect to host with supplied credentials.\"\n    raise SystemExit(\"Unable to connect to host with supplied credentials.\")\n\nVM = None\nif args.vm:\n    VM = get_obj(SI.content, [vim.VirtualMachine], args.vm)\nelif args.uuid:\n    VM = SI.content.searchIndex.FindByUuid(None, args.uuid,\n                                           True,\n                                           False)\nelif args.name:\n    VM = SI.content.searchIndex.FindByDnsName(None, args.name,\n                                              True)\nelif args.ip:\n    VM = SI.content.searchIndex.FindByIp(None, args.ip, True)\n\nif VM is None:\n    result = \"Unable to locate VirtualMachine. Arguments given: vm - {0} , uuid - {1} , name - {2} , ip - {3}\".format(args.vm, args.uuid, args.name, args.ip)\n        \n    raise SystemExit(\n        \"Unable to locate VirtualMachine. Arguments given: \"\n        \"vm - {0} , uuid - {1} , name - {2} , ip - {3}\"\n        .format(args.vm, args.uuid, args.name, args.ip)\n        )\n\nresult = \"Found: {0}\".format(VM.name)\nresult = \"The current powerState is: {0}\".format(VM.runtime.powerState)\nif format(VM.runtime.powerState) == \"poweredOn\":\n    result = \"Attempting to power off {0}\".format(VM.name)\n    TASK = VM.PowerOffVM_Task()\n    wait_for_tasks(SI, [TASK])\n    result = \"{0}\".format(TASK.info.state)\n\nresult = \"Destroying VM from vSphere.\"\nTASK = VM.Destroy_Task()\nwait_for_tasks(SI, [TASK])\nresult = \"success\"","top":75,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":87.5,"linebox_long":0,"linebox_top_width":7.5,"linebox_bottom_width":-7.5,"linebox_arrow_top":85,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":162.5,"linebox_long":0,"linebox_top_width":7.5,"linebox_bottom_width":-7.5,"linebox_arrow_top":160,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049372801},"config":{"subflow":[],"permission":[],"name":"destroy_vm","description":"","api_path":"destroy-vm","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"vm_rename","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter 原VM名稱"},{"require":true,"value":null,"name":"new_vm_name","des":"vCenter 新VM名稱"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":200,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(new_vm_name)","name":"new_vm_name","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n# VMware vSphere Python SDK\n# Copyright (c) 2008-2013 VMware, Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nA Python script for changing the name of an object. Demonstrates the use\nof tasks in an asynchronous way.\n\"\"\"\n\nimport atexit\nimport sys\nimport time\nimport ssl\n\nfrom pyVim.connect import SmartConnect, SmartConnectNoSSL, Disconnect\nfrom pyVmomi import vim\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    name = vm_name\n    new_name = new_vm_name\n\nargs = get_args()\n\n# form a connection...\ncontext = None\nif hasattr(ssl, '_create_unverified_context'):\n    context = ssl._create_unverified_context()  \nsi = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\nif not si:\n    result = \"Cannot connect to specified host using specified username and password\"\n    sys.exit()\n\n# doing this means you don't need to remember to disconnect your script/objects\natexit.register(Disconnect, si)\n\n# search the whole inventory tree recursively... a brutish but effective tactic\nroot_folder = si.content.rootFolder\nentity_stack = root_folder.childEntity\nname = args.name\nobj = None\nwhile entity_stack:\n    entity = entity_stack.pop()\n    if entity.name == name:\n        obj = entity\n        break\n    elif isinstance(entity, vim.Datacenter):\n        # add this vim.DataCenter's folders to our search\n        # we don't know the entity's type so we have to scan\n        # each potential folder...\n        entity_stack.append(entity.datastoreFolder)\n        entity_stack.append(entity.hostFolder)\n        entity_stack.append(entity.networkFolder)\n        entity_stack.append(entity.vmFolder)\n    elif isinstance(entity, vim.Folder):\n        # add all child entities from this folder to our search\n        entity_stack.extend(entity.childEntity)\n\nif obj is None:\n    result = \"A object named %s could not be found\" % args.name\n    exit()\n\nif args.new_name:\n    new_name = args.new_name\nelse:\n    result = \"Found no new_name\"\n    exit()\n\n# rename creates a task...\ntask = obj.Rename(new_name)\n\n# Did you know that task objects in pyVmomi get updates automatically?\n# Check this out... it's not super efficient but here's how you could\n# have a script that looped waiting on a task but still had the\n# chance to periodically check other things or do other actions...\n# print(\"rename task state:\")\n# count = 0\n# state = task.info.state\n# while task.info.state != vim.TaskInfo.State.success:\n#     sys.stdout.write(\"\\r\\t\" + str(time.time()) + \"\\t: \" + task.info.state)\n#     sys.stdout.flush()\n#     count += 1\nprint(\"rename finished\")","top":100,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049704899},"config":{"subflow":[],"permission":[],"name":"vm_rename","description":"","api_path":"vm-rename","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"generate_html5_console","description":"需自行安裝套件 pyOpenSSL","flowobject":{"flow_item_counter":7,"flow_line_counter":10,"form_object":{"form_item_counter":8,"form_box_counter":3,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[{"id":"FORMBOX_2","type":"box6","parent":"public","hidden":false,"config":{"idcounter":2,"color":"box box-primary","title":"Web Console"}},{"id":"FORMITM_1","type":"h_title","parent":"FORMBOX_2","hidden":false,"config":{"idcounter":1,"title":"URL - only available 3 minutes","require":false,"placeholder":"","value":"","regex":"","readonly":false,"type":"inputbox"}},{"id":"FORMITM_2","type":"inputbox","parent":"FORMBOX_2","hidden":false,"config":{"idcounter":2,"title":"Result","require":false,"placeholder":"","type":"text","value":"","regex":"","readonly":false,"rows":0}},{"id":"FORMBOX_3","type":"box6","parent":"public","hidden":false,"config":{"idcounter":3,"color":"box box-primary","title":"VC"}},{"id":"FORMITM_3","type":"inputbox","parent":"FORMBOX_3","hidden":false,"config":{"idcounter":3,"title":"host","require":false,"placeholder":"","type":"text","value":"","regex":"","readonly":false,"rows":0}},{"id":"FORMITM_4","type":"inputbox","parent":"FORMBOX_3","hidden":false,"config":{"idcounter":4,"title":"port","require":false,"placeholder":"","type":"text","value":"","regex":"","readonly":false,"rows":0}},{"id":"FORMITM_5","type":"inputbox","parent":"FORMBOX_3","hidden":false,"config":{"idcounter":5,"title":"user","require":false,"placeholder":"","type":"text","value":"","regex":"","readonly":false,"rows":0}},{"id":"FORMITM_7","type":"inputbox","parent":"FORMBOX_3","hidden":false,"config":{"idcounter":7,"title":"password","require":false,"placeholder":"","type":"password","value":"","regex":"","readonly":false,"rows":0}},{"id":"FORMITM_8","type":"inputbox","parent":"FORMBOX_3","hidden":false,"config":{"idcounter":8,"title":"vm_name","require":false,"placeholder":"","type":"text","value":"","regex":"","readonly":false,"rows":0}}]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":false,"value":"#(FORMITM_3)","name":"host","des":"vCenter domain/IP"},{"require":false,"value":"#(FORMITM_4)","name":"port","des":"vCenter Port"},{"require":false,"value":"#(FORMITM_5)","name":"user","des":"vCenter 登入帳號"},{"require":false,"value":"#(FORMITM_7)","name":"password","des":"vCenter 登入密碼"},{"require":false,"value":"#(FORMITM_8)","name":"vm_name","des":"vCenter VM名稱"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"#(FORMITM_2)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"},{"value":"#(FORMITM_1)","name":"$(url)","des":"Console 網址"}],"calculate":[],"top":300,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(data_no)","name":"data_no","des":""},{"require":false,"value":null,"name":"url","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""},{"value":"$(url)","name":"$(url)","des":""}],"calculate":[{"type":"get_data_no","from":null,"para1":null,"para2":null,"to":"$(data_no)"}],"code":"#!/usr/bin/env python\n# Copyright (c) 2015 Christian Gerbrandt <derchris@derchris.eu>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nPython port of William Lam's generateHTML5VMConsole.pl\nAlso ported SHA fingerprint fetching to Python OpenSSL library\n\"\"\"\n\nimport atexit\nimport OpenSSL #需先安裝pyopenssl套件\nimport ssl\nimport sys\nimport time\n\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\nfrom pyVim.connect import SmartConnect, Disconnect\n\nfrom omflow.global_obj import FlowActiveGlobalObject \nfrom omflow.syscom.common import getModel\nfrom omformflow.views import updateOmData\n\ndef get_obj(content, vimtype, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    name = vm_name\n\ndef main():\n    \"\"\"\n    Simple command-line program to generate a URL\n    to open HTML5 Console in Web browser\n    \"\"\"\n    global data_no,url,result\n    \n    args = get_args()\n\n    try:\n        context = None\n        if hasattr(ssl, '_create_unverified_context'):\n            context = ssl._create_unverified_context()  \n        si = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n        if not si:\n            result = \"Cannot connect to specified host using specified username and password\"\n            sys.exit()\n    except Exception as e:\n        print('Could not connect to vCenter host')\n        result = repr(e)\n        sys.exit(1)\n\n    atexit.register(Disconnect, si)\n\n    content = si.RetrieveContent()\n    vm = get_obj(content, [vim.VirtualMachine], args.name)\n    #vm = get_vm(content, args.name)\n\n    vm_moid = vm._moId\n    print(vm_moid)\n    vcenter_data = content.setting\n    vcenter_settings = vcenter_data.setting\n\n    for item in vcenter_settings:\n        key = getattr(item, 'key')\n        if key == 'VirtualCenter.FQDN':\n            vcenter_fqdn = getattr(item, 'value')\n\n    session_manager = content.sessionManager\n    session = session_manager.AcquireCloneTicket()\n\n    vc_cert = ssl.get_server_certificate((args.host, int(args.port)))\n    vc_pem = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM,\n                                             vc_cert)\n    vc_fingerprint = vc_pem.digest('sha1')\n\n    print(\"Open the following URL in your browser to access the \" \\\n          \"Remote Console.\\n\" \\\n          \"You have 180 seconds to open the URL, or the session\" \\\n          \"will be terminated.\\n\")\n    url = \"https://\" + args.host + \"/ui/webconsole.html?vmId=\" \\\n          + str(vm_moid) + \"&vmName=\" + args.name + \"&host=\" + vcenter_fqdn \\\n          + \"&sessionTicket=\" + session + \"&thumbprint=\" + str(vc_fingerprint) + \"&locale=en-US\"\n    print(url)\n    count = 3\n    postdata = {}\n    flow_uuid = FlowActiveGlobalObject.APIgetUUID('generate-html5-console')\n    omdata_model = getModel('omformmodel','Omdata_' + flow_uuid)\n    while count:\n        data_id = list(omdata_model.objects.filter(data_no=data_no,history=False,running=False,error=False).values_list('id',flat=True))\n        if len(data_id)==1:\n            data_id = data_id[0]\n            break\n        count-=1\n        time.sleep(3)\n    \n    postdata[\"data_id\"] = data_id\n    postdata['flow_uuid'] = flow_uuid\n    postdata[\"formdata\"] = [{'type':'h_title','id':'formitm_1','value':url},{'type':'inputbox','id':'formitm_2','value':'success'}]\n    updateOmData(postdata, user='system')\n\n    time.sleep(180)\n    \n# Start program\nmain()","top":100,"left":360,"collector":null}},{"id":"FITEM_6","type":"async","text":"並行","left":0,"top":0,"config":{"rules":[{"target":"FITEM_5","value1":"","value2":"","rule":"="},{"target":"FITEM_7","value1":"","value2":"","rule":"="}],"log":true,"top":100,"left":210}},{"id":"FLINE_MW6","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_6","source_item":"FITEM_1","idcounter":6,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MH7","type":"line","config":{"target_side":"left","source_side":"right","target_item":"FITEM_5","source_item":"FITEM_6","idcounter":7,"linebox_left":345,"linebox_top":150,"linebox_long":0,"linebox_top_width":15,"linebox_bottom_width":-15,"linebox_arrow_top":146,"linebox_arrow_left":350}},{"id":"FITEM_7","type":"form","text":"人工輸入","left":0,"top":0,"config":{"calculate":[],"input":[{"require":false,"value":"$(result)","name":"#(FORMITM_2)","des":""},{"require":false,"value":"$(url)","name":"#(FORMITM_1)","des":""}],"input1":[],"input2":[],"action1":false,"action1_text":"","action2":false,"action2_text":"","output":[],"form_object":null,"subflow_input":[],"subflow_output":[],"log":true,"top":200,"left":210,"cform_object":null,"subflow_id":""}},{"id":"FLINE_MW8","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_7","source_item":"FITEM_6","idcounter":8,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}},{"id":"FLINE_MW9","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_7","idcounter":9,"linebox_left":270,"linebox_top":300,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":310,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049733476},"config":{"subflow":[],"permission":[],"name":"generate_html5_console","description":"需自行安裝套件 pyOpenSSL","api_path":"generate-html5-console","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"scheduled_operations","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":null,"name":"date_time","des":"執行時間格式：d/m/Y H:M"},{"require":true,"value":null,"name":"action","des":"執行動作：on / off / reboot"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":275,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(date_time)","name":"date_time","des":""},{"require":false,"value":"$(action)","name":"action","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\"\"\"\nWritten by Gael Berthaud-Muller\nGithub : https://github.com/blacksponge\nThis code is released under the terms of the Apache 2\nhttp://www.apache.org/licenses/LICENSE-2.0.html\nExample code for using the task scheduler.\n\"\"\"\n\nimport atexit\nimport ssl\nfrom datetime import datetime\nfrom pyVmomi import vim\nfrom pyVim.connect import SmartConnect, SmartConnectNoSSL, Disconnect\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vmname = vm_name\n    date = date_time\n    action = action\n\ndef main():\n    global result\n    args = get_args()\n    try:\n        dt = datetime.strptime(args.date, '%d/%m/%Y %H:%M')\n    except ValueError:\n        result = 'Unrecognized date format'\n        raise\n        return -1\n\n    if args.password:\n        password = args.password\n    else:\n        password = getpass.getpass(prompt='Enter password for host %s and '\n                                   'user %s: ' % (args.host, args.user))\n\n    try:\n        context = None\n        if hasattr(ssl, '_create_unverified_context'):\n            context = ssl._create_unverified_context()  \n        si = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n        if not si:\n            result = \"Cannot connect to specified host using specified username and password\"\n            sys.exit()\n    \n    except vim.fault.InvalidLogin:\n        result = \"Could not connect to the specified host using specified username and password\"\n        return -1\n\n    atexit.register(Disconnect, si)\n\n    view = si.content.viewManager.CreateContainerView(si.content.rootFolder,\n                                                      [vim.VirtualMachine],\n                                                      True)\n    vms = [vm for vm in view.view if vm.name == args.vmname]\n\n    if not vms:\n        result = 'VM not found'\n        connect.Disconnect(si)\n        return -1\n    vm = vms[0]\n    \n    if action==\"on\":\n        spec = vim.scheduler.ScheduledTaskSpec()\n        spec.name = 'PowerOn vm %s' % args.vmname\n        spec.description = ''\n        spec.scheduler = vim.scheduler.OnceTaskScheduler()\n        spec.scheduler.runAt = dt\n        spec.action = vim.action.MethodAction()\n        spec.action.name = vim.VirtualMachine.PowerOn\n        spec.enabled = True\n    elif action==\"off\":\n        spec = vim.scheduler.ScheduledTaskSpec()\n        spec.name = 'PowerOff vm %s' % args.vmname\n        spec.description = ''\n        spec.scheduler = vim.scheduler.OnceTaskScheduler()\n        spec.scheduler.runAt = dt\n        spec.action = vim.action.MethodAction()\n        spec.action.name = vim.VirtualMachine.PowerOff\n        spec.enabled = True\n    elif action==\"reboot\":\n        spec = vim.scheduler.ScheduledTaskSpec()\n        spec.name = 'PowerReboot vm %s' % args.vmname\n        spec.description = ''\n        spec.scheduler = vim.scheduler.OnceTaskScheduler()\n        spec.scheduler.runAt = dt\n        spec.action = vim.action.MethodAction()\n        spec.action.name = vim.VirtualMachine.Reset\n        spec.enabled = True\n\n    si.content.scheduledTaskManager.CreateScheduledTask(vm, spec)\n\n    #message = \"Done\"\n\nmain()","top":125,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":112.5,"linebox_long":0,"linebox_top_width":32.5,"linebox_bottom_width":-32.5,"linebox_arrow_top":135,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":250,"linebox_long":0,"linebox_top_width":45,"linebox_bottom_width":-45,"linebox_arrow_top":285,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049762785},"config":{"subflow":[],"permission":[],"name":"scheduled_operations","description":"","api_path":"scheduled-operations","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"delete_disk_from_vm","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":null,"name":"disk_no","des":"vCenter VM硬碟編號"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":275,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(disk_no)","name":"unitnumber","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Written by JM Lopez\n# GitHub: https://github.com/jm66\n# Email: jm@jmll.me\n# Website: http://jose-manuel.me\n#\n# Note: Example code For testing purposes only\n#\n# This code has been released under the terms of the Apache-2.0 license\n# http://opensource.org/licenses/Apache-2.0\n#\n\nimport atexit\nimport requests\nimport ssl\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\nfrom pyVim.connect import SmartConnect, Disconnect\n\n# disable  urllib3 warnings\nif hasattr(requests.packages.urllib3, 'disable_warnings'):\n    requests.packages.urllib3.disable_warnings()\n\n\ndef get_hdd_prefix_label(language):\n    language_prefix_label_mapper = {\n        'English': 'Hard disk ',\n        'Chinese': u'硬碟 '\n    }\n    return language_prefix_label_mapper.get(language)\n\ndef wait_for_tasks(service_instance, tasks):\n    \"\"\"Given the service instance si and tasks, it returns after all the\n    tasks are complete\n    \"\"\"\n    property_collector = service_instance.content.propertyCollector\n    task_list = [str(task) for task in tasks]\n    # Create filter\n    obj_specs = [vmodl.query.PropertyCollector.ObjectSpec(obj=task)\n                 for task in tasks]\n    property_spec = vmodl.query.PropertyCollector.PropertySpec(type=vim.Task,\n                                                               pathSet=[],\n                                                               all=True)\n    filter_spec = vmodl.query.PropertyCollector.FilterSpec()\n    filter_spec.objectSet = obj_specs\n    filter_spec.propSet = [property_spec]\n    pcfilter = property_collector.CreateFilter(filter_spec, True)\n    try:\n        version, state = None, None\n        # Loop looking for updates till the state moves to a completed state.\n        while len(task_list):\n            update = property_collector.WaitForUpdates(version)\n            for filter_set in update.filterSet:\n                for obj_set in filter_set.objectSet:\n                    task = obj_set.obj\n                    for change in obj_set.changeSet:\n                        if change.name == 'info':\n                            state = change.val.state\n                        elif change.name == 'info.state':\n                            state = change.val\n                        else:\n                            continue\n\n                        if not str(task) in task_list:\n                            continue\n\n                        if state == vim.TaskInfo.State.success:\n                            # Remove task from taskList\n                            task_list.remove(str(task))\n                        elif state == vim.TaskInfo.State.error:\n                            raise task.info.error\n            # Move to next version\n            version = update.version\n    finally:\n        if pcfilter:\n            pcfilter.Destroy()\n    \ndef delete_virtual_disk(si, vm_obj, disk_number, language):\n    \"\"\" Deletes virtual Disk based on disk number\n    :param si: Service Instance\n    :param vm_obj: Virtual Machine Object\n    :param disk_number: Hard Disk Unit Number\n    :param language: Vcenter API language\n    :return: True if success\n    \"\"\"\n    global result\n    hdd_prefix_label = get_hdd_prefix_label(language)\n    if not hdd_prefix_label:\n        result = 'Hdd prefix label could not be found'\n        raise RuntimeError('Hdd prefix label could not be found')\n\n    hdd_label = hdd_prefix_label + str(disk_number)\n    \n    virtual_hdd_device = None\n    \n    for dev in vm_obj.config.hardware.device:\n        print(dev.deviceInfo.label)\n        if isinstance(dev, vim.vm.device.VirtualDisk) and dev.deviceInfo.label == hdd_label:\n            virtual_hdd_device = dev\n    if not virtual_hdd_device:\n        result = 'Virtual Disk could not be found.'\n        raise RuntimeError('Virtual Disk could not be found.')\n\n    virtual_hdd_spec = vim.vm.device.VirtualDeviceSpec()\n    virtual_hdd_spec.operation = vim.vm.device.VirtualDeviceSpec.Operation.remove\n    virtual_hdd_spec.device = virtual_hdd_device\n\n    spec = vim.vm.ConfigSpec()\n    spec.deviceChange = [virtual_hdd_spec]\n    task = vm_obj.ReconfigVM_Task(spec=spec)\n    wait_for_tasks(si, [task])\n    return True\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vmname = vm_name\n    unitnumber = unitnumber\n    yes = True\n    language = \"English\"\n\n\ndef get_obj(content, vim_type, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vim_type, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\n\ndef main():\n    global result\n    args = get_args()\n\n    # connect to vc\n    context = None\n    if hasattr(ssl, '_create_unverified_context'):\n        context = ssl._create_unverified_context()  \n    si = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n    if not si:\n        result = \"Cannot connect to specified host using specified username and password\"\n        sys.exit()\n    # disconnect vc\n    atexit.register(Disconnect, si)\n\n    content = si.RetrieveContent()\n    print('Searching for VM {}'.format(args.vmname))\n    vm_obj = get_obj(content, [vim.VirtualMachine], args.vmname)\n\n    if vm_obj:\n        if not args.yes:\n            cli.prompt_y_n_question(\"Are you sure you want \"\n                                    \"to delete HDD \"\n                                    \"{}?\".format(args.unitnumber),\n                                    default='no')\n        delete_virtual_disk(si, vm_obj, args.unitnumber, args.language)\n        print('VM HDD \"{}\" successfully deleted.'.format(args.unitnumber))\n    else:\n        result = 'VM not found'\n\nmain()","top":125,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":112.5,"linebox_long":0,"linebox_top_width":32.5,"linebox_bottom_width":-32.5,"linebox_arrow_top":135,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":250,"linebox_long":0,"linebox_top_width":45,"linebox_bottom_width":-45,"linebox_arrow_top":285,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049822514},"config":{"subflow":[],"permission":[],"name":"delete_disk_from_vm","description":"","api_path":"delete-disk-from-vm","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"upload_file_to_vm","description":"","flowobject":{"flow_item_counter":6,"flow_line_counter":8,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":null,"name":"vm_user","des":"vCenter VM登入帳號"},{"require":true,"value":null,"name":"vm_pwd","des":"vCenter VM登入密碼"},{"require":true,"value":null,"name":"source_file_path","des":"本機檔案路徑：<路徑>\\<檔案名稱>"},{"require":true,"value":null,"name":"destinaton_file_path","des":"VM上傳路徑位置：<路徑>\\<檔案名稱>"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":200,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(vm_user)","name":"vm_user","des":""},{"require":false,"value":"$(vm_pwd)","name":"vm_pwd","des":""},{"require":false,"value":"$(source_file_path)","name":"path_upload_file","des":""},{"require":false,"value":"$(destinaton_file_path)","name":"path_inside_vm","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\"\"\"\nWritten by Reubenur Rahman\nGithub: https://github.com/rreubenur/\nThis code is released under the terms of the Apache 2\nhttp://www.apache.org/licenses/LICENSE-2.0.html\nExample script to upload a file from host to guest\n\"\"\"\nfrom __future__ import with_statement\nfrom pyVmomi import vim, vmodl\nfrom pyVim.connect import SmartConnect, Disconnect\nimport atexit\nimport requests\nimport ssl\nimport re\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vm_name = vm_name\n    vm_uuid = \"\"\n    vm_user = vm_user\n    vm_pwd = vm_pwd\n    path_inside_vm = path_inside_vm\n    upload_file = path_upload_file\n\ndef get_obj(content, vimtype, name):\n    \"\"\"\n     Get the vsphere object associated with a given text name\n    \"\"\"\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\ndef main():\n    \"\"\"\n    Simple command-line program for Uploading a file from host to guest\n    \"\"\"\n    global result\n    args = get_args()\n    vm_path = args.path_inside_vm\n    try:\n        context = None\n        if hasattr(ssl, '_create_unverified_context'):\n            context = ssl._create_unverified_context()  \n        service_instance = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n        if not service_instance:\n            result = \"Cannot connect to specified host using specified username and password\"\n            sys.exit()\n\n        atexit.register(Disconnect, service_instance)\n        content = service_instance.RetrieveContent()\n        \n        vm = None\n        if args.vm_uuid:\n            vm = content.searchIndex.FindByUuid(None, args.vm_uuid, True)\n        else:\n            vm = get_obj(content, [vim.VirtualMachine], vm_name)\n            \n        tools_status = vm.guest.toolsStatus\n        if (tools_status == 'toolsNotInstalled' or\n                tools_status == 'toolsNotRunning'):\n            raise SystemExit(\n                \"VMwareTools is either not running or not installed. \"\n                \"Rerun the script after verifying that VMWareTools \"\n                \"is running\")\n\n        creds = vim.vm.guest.NamePasswordAuthentication(username=args.vm_user, password=args.vm_pwd)\n        with open(args.upload_file, 'rb') as myfile:\n            fileinmemory = myfile.read()\n\n        try:\n            file_attribute = vim.vm.guest.FileManager.FileAttributes()\n            url = content.guestOperationsManager.fileManager.InitiateFileTransferToGuest(vm, creds, vm_path, file_attribute, len(fileinmemory), True)\n            # When : host argument becomes https://*:443/guestFile?\n            # Ref: https://github.com/vmware/pyvmomi/blob/master/docs/vim/vm/guest/FileManager.rst\n            # Script fails in that case, saying URL has an invalid label.\n            # By having hostname in place will take take care of this.\n            print(url)\n            url = re.sub(r\"^https://\\*:\", \"https://\"+str(args.host)+\":\", url)\n            print(url)\n            resp = requests.put(url, data=fileinmemory, verify=False)\n            if not resp.status_code == 200:\n                result = \"Error while uploading file\"\n            else:\n                print(\"Successfully uploaded file\")\n        except Exception as error:\n            result = error.msg\n            return -1\n    except vmodl.MethodFault as error:\n        result = \"Caught vmodl fault : \" + error.msg\n        return -1\n\n    return 0\n\nmain()","top":100,"left":210,"collector":null}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}},{"id":"FLINE_MW8","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":8,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}}],"version":16777216,"uid":1600049849881},"config":{"subflow":[],"permission":[],"name":"upload_file_to_vm","description":"","api_path":"upload-file-to-vm","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"change_vm_nic_state","description":"","flowobject":{"flow_item_counter":11,"flow_line_counter":22,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":false,"value":"None","name":"nic_no","des":"vCenter VM網卡編號、三擇一"},{"require":false,"value":null,"name":"nic_ip","des":"vCenter VM網卡IP、三擇一"},{"require":false,"value":null,"name":"nic_mac","des":"vCenter VM網卡mac、三擇一"},{"require":true,"value":"connect","name":"action","des":"執行動作：connect / disconnect "}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":300,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(nic_no)","name":"unitnumber","des":""},{"require":false,"value":"$(action)","name":"action","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n#\n# Written by JM Lopez\n# GitHub: https://github.com/jm66\n# Email: jm@jmll.me\n# Website: http://jose-manuel.me\n#\n# Note: Example code For testing purposes only\n#\n# This code has been released under the terms of the Apache-2.0 license\n# http://opensource.org/licenses/Apache-2.0\n#\n\nimport atexit\nimport sys\nimport time\nimport ssl\nimport requests\nfrom pyVim.connect import SmartConnect, SmartConnectNoSSL, Disconnect\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\n\n# disable  urllib3 warnings\nif hasattr(requests.packages.urllib3, 'disable_warnings'):\n    requests.packages.urllib3.disable_warnings()\n\ndef wait_for_tasks(service_instance, tasks):\n    \"\"\"Given the service instance si and tasks, it returns after all the\n    tasks are complete\n    \"\"\"\n    property_collector = service_instance.content.propertyCollector\n    task_list = [str(task) for task in tasks]\n    # Create filter\n    obj_specs = [vmodl.query.PropertyCollector.ObjectSpec(obj=task)\n                 for task in tasks]\n    property_spec = vmodl.query.PropertyCollector.PropertySpec(type=vim.Task,\n                                                               pathSet=[],\n                                                               all=True)\n    filter_spec = vmodl.query.PropertyCollector.FilterSpec()\n    filter_spec.objectSet = obj_specs\n    filter_spec.propSet = [property_spec]\n    pcfilter = property_collector.CreateFilter(filter_spec, True)\n    try:\n        version, state = None, None\n        # Loop looking for updates till the state moves to a completed state.\n        while len(task_list):\n            update = property_collector.WaitForUpdates(version)\n            for filter_set in update.filterSet:\n                for obj_set in filter_set.objectSet:\n                    task = obj_set.obj\n                    for change in obj_set.changeSet:\n                        if change.name == 'info':\n                            state = change.val.state\n                        elif change.name == 'info.state':\n                            state = change.val\n                        else:\n                            continue\n\n                        if not str(task) in task_list:\n                            continue\n\n                        if state == vim.TaskInfo.State.success:\n                            # Remove task from taskList\n                            task_list.remove(str(task))\n                        elif state == vim.TaskInfo.State.error:\n                            raise task.info.error\n            # Move to next version\n            version = update.version\n    finally:\n        if pcfilter:\n            pcfilter.Destroy()    \n    \ndef update_virtual_nic_state(si, vm_obj, nic_number, new_nic_state):\n    \"\"\"\n    :param si: Service Instance\n    :param vm_obj: Virtual Machine Object\n    :param nic_number: Network Interface Controller Number\n    :param new_nic_state: Either Connect, Disconnect or Delete\n    :return: True if success\n    \"\"\"\n    nic_prefix_label = 'Network adapter '\n    nic_label = nic_prefix_label + str(nic_number)\n    virtual_nic_device = None\n    for dev in vm_obj.config.hardware.device:\n        print(dev)\n        if isinstance(dev, vim.vm.device.VirtualEthernetCard) \\\n                and dev.deviceInfo.label == nic_label:\n            virtual_nic_device = dev\n    if not virtual_nic_device:\n        result = 'Virtual {} could not be found.'.format(nic_label)\n        raise RuntimeError('Virtual {} could not be found.'.format(nic_label))\n\n    virtual_nic_spec = vim.vm.device.VirtualDeviceSpec()\n    virtual_nic_spec.operation = \\\n        vim.vm.device.VirtualDeviceSpec.Operation.remove \\\n        if new_nic_state == 'delete' \\\n        else vim.vm.device.VirtualDeviceSpec.Operation.edit\n    virtual_nic_spec.device = virtual_nic_device\n    virtual_nic_spec.device.key = virtual_nic_device.key\n    virtual_nic_spec.device.macAddress = virtual_nic_device.macAddress\n    virtual_nic_spec.device.backing = virtual_nic_device.backing\n    virtual_nic_spec.device.wakeOnLanEnabled = \\\n        virtual_nic_device.wakeOnLanEnabled\n    connectable = vim.vm.device.VirtualDevice.ConnectInfo()\n    if new_nic_state == 'connect':\n        connectable.connected = True\n        connectable.startConnected = True\n    elif new_nic_state == 'disconnect':\n        connectable.connected = False\n        connectable.startConnected = False\n    else:\n        connectable = virtual_nic_device.connectable\n    virtual_nic_spec.device.connectable = connectable\n    dev_changes = []\n    dev_changes.append(virtual_nic_spec)\n    spec = vim.vm.ConfigSpec()\n    spec.deviceChange = dev_changes\n    task = vm_obj.ReconfigVM_Task(spec=spec)\n    wait_for_tasks(si, [task])\n    return True\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vmname = vm_name\n    unitnumber = unitnumber\n    state = action #choices=['delete', 'disconnect', 'connect']\n    \ndef get_obj(content, vim_type, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vim_type, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\n\ndef main():\n    global result\n    args = get_args()\n\n    try:\n        context = None\n        if hasattr(ssl, '_create_unverified_context'):\n            context = ssl._create_unverified_context()  \n        si = SmartConnect(host=args.host,user=args.user,pwd=args.password,port=int(args.port),sslContext=context)\n        if not si:\n            result = \"Cannot connect to specified host using specified username and password\"\n            return -1\n    \n    except vim.fault.InvalidLogin:\n        result = \"Could not connect to the specified host using specified username and password\"\n        return -1\n\n    content = si.RetrieveContent()\n    print('Searching for VM {}'.format(args.vmname))\n    vm_obj = get_obj(content, [vim.VirtualMachine], args.vmname)\n\n    if vm_obj:\n        update_virtual_nic_state(si, vm_obj, args.unitnumber, args.state)\n        print('VM NIC {} successfully' \\\n              ' state changed to {}'.format(args.unitnumber, args.state))\n    else:\n        result = \"VM not found\"\n\nmain()","top":200,"left":210,"collector":null}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":300,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":310,"linebox_arrow_left":266}},{"id":"FITEM_8","type":"switch","text":"判斷","left":0,"top":0,"config":{"calculate":[],"rules":[{"target":"FITEM_5","value1":"$(nic_no)","value2":"None","rule":"!="},{"target":"FITEM_11","value1":"$(nic_no)","value2":"None","rule":"="}],"log":true,"top":100,"left":210}},{"id":"FLINE_MW10","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_8","source_item":"FITEM_1","idcounter":10,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MW12","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_8","idcounter":12,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}},{"id":"FITEM_11","type":"inflow","text":"流程","left":0,"top":0,"config":{"error_pass":false,"log":true,"flow_name":"get_nic-no_from_vm","subflow_input":[{"require":false,"value":"$(result)","name":"$(result)","des":""},{"require":false,"value":"$(host)","name":"$(host)","des":""},{"require":false,"value":"$(port)","name":"$(port)","des":""},{"require":false,"value":"$(user)","name":"$(user)","des":""},{"require":false,"value":"$(password)","name":"$(password)","des":""},{"require":false,"value":"$(vm_name)","name":"$(vm_name)","des":""},{"require":false,"value":"$(nic_ip)","name":"$(nic_ip)","des":""},{"require":false,"value":"$(nic_mac)","name":"$(nic_mac)","des":""}],"subflow_output":[{"value":"$(result)","name":"$(result)","des":""},{"value":"$(nic_no)","name":"$(nic_no)","des":""}],"top":100,"left":390}},{"id":"FLINE_MH21","type":"line","config":{"target_side":"left","source_side":"right","target_item":"FITEM_11","source_item":"FITEM_8","idcounter":21,"linebox_left":360,"linebox_top":150,"linebox_long":0,"linebox_top_width":30,"linebox_bottom_width":-30,"linebox_arrow_top":146,"linebox_arrow_left":380}},{"id":"FLINE_MH22","type":"line","config":{"target_side":"right","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_11","idcounter":22,"linebox_left":450,"linebox_top":250,"linebox_long":0,"linebox_top_width":-120,"linebox_bottom_width":-70,"linebox_arrow_top":246,"linebox_arrow_left":330}}],"version":16777216,"uid":1600050312088},"config":{"subflow":[],"permission":[],"name":"change_vm_nic_state","description":"","api_path":"change-vm-nic-state","fp_show":true,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":true,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"delete_nic_from_vm","description":"","flowobject":{"flow_item_counter":8,"flow_line_counter":11,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM編號"},{"require":false,"value":"None","name":"nic_no","des":"vCenter VM網卡編號、三擇一"},{"require":false,"value":null,"name":"nic_ip","des":"vCenter VM網卡IP、三擇一"},{"require":false,"value":null,"name":"nic_mac","des":"vCenter VM網卡MAC、三擇一"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":300,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(nic_no)","name":"unitnumber","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\"\"\"\nWritten by nickcooper-zhangtonghao\nGithub: https://github.com/nickcooper-zhangtonghao\nEmail: nickcooper-zhangtonghao@opencloud.tech\nNote: Example code For testing purposes only\nThis code has been released under the terms of the Apache-2.0 license\nhttp://opensource.org/licenses/Apache-2.0\n\"\"\"\nfrom pyVmomi import vim\nfrom pyVmomi import vmodl\nfrom pyVim.connect import SmartConnect, Disconnect\nimport atexit\nimport ssl\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vm_name = vm_name\n    uuid = None\n    unit_number = unitnumber\n\ndef wait_for_tasks(service_instance, tasks):\n    \"\"\"Given the service instance si and tasks, it returns after all the\n    tasks are complete\n    \"\"\"\n    property_collector = service_instance.content.propertyCollector\n    task_list = [str(task) for task in tasks]\n    # Create filter\n    obj_specs = [vmodl.query.PropertyCollector.ObjectSpec(obj=task)\n                 for task in tasks]\n    property_spec = vmodl.query.PropertyCollector.PropertySpec(type=vim.Task,\n                                                               pathSet=[],\n                                                               all=True)\n    filter_spec = vmodl.query.PropertyCollector.FilterSpec()\n    filter_spec.objectSet = obj_specs\n    filter_spec.propSet = [property_spec]\n    pcfilter = property_collector.CreateFilter(filter_spec, True)\n    try:\n        version, state = None, None\n        # Loop looking for updates till the state moves to a completed state.\n        while len(task_list):\n            update = property_collector.WaitForUpdates(version)\n            for filter_set in update.filterSet:\n                for obj_set in filter_set.objectSet:\n                    task = obj_set.obj\n                    for change in obj_set.changeSet:\n                        if change.name == 'info':\n                            state = change.val.state\n                        elif change.name == 'info.state':\n                            state = change.val\n                        else:\n                            continue\n\n                        if not str(task) in task_list:\n                            continue\n\n                        if state == vim.TaskInfo.State.success:\n                            # Remove task from taskList\n                            task_list.remove(str(task))\n                        elif state == vim.TaskInfo.State.error:\n                            raise task.info.error\n            # Move to next version\n            version = update.version\n    finally:\n        if pcfilter:\n            pcfilter.Destroy()\n\ndef get_obj(content, vimtype, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\ndef del_nic(si, vm, nic_number):\n    \"\"\" Deletes virtual NIC based on nic number\n    :param si: Service Instance\n    :param vm: Virtual Machine Object\n    :param nic_number: Unit Number\n    :return: True if success\n    \"\"\"\n    global result\n    nic_prefix_label = 'Network adapter '\n    nic_label = nic_prefix_label + str(nic_number)\n    virtual_nic_device = None\n    for dev in vm.config.hardware.device:\n        if isinstance(dev, vim.vm.device.VirtualEthernetCard)   \\\n                and dev.deviceInfo.label == nic_label:\n            virtual_nic_device = dev\n\n    if not virtual_nic_device:\n        result = 'Virtual {} could not be found.'\n        raise RuntimeError('Virtual {} could not be found.'.format(nic_label))\n\n    virtual_nic_spec = vim.vm.device.VirtualDeviceSpec()\n    virtual_nic_spec.operation = \\\n        vim.vm.device.VirtualDeviceSpec.Operation.remove\n    virtual_nic_spec.device = virtual_nic_device\n\n    spec = vim.vm.ConfigSpec()\n    spec.deviceChange = [virtual_nic_spec]\n    task = vm.ReconfigVM_Task(spec=spec)\n    wait_for_tasks(si, [task])\n    return True\n\n\ndef main():\n    global result\n    args = get_args()\n\n    # connect this thing\n    context = None\n    if hasattr(ssl, '_create_unverified_context'):\n        context = ssl._create_unverified_context()  \n    serviceInstance = SmartConnect(host=args.host,user=args.user,pwd=password,port=int(args.port),sslContext=context)\n    if not serviceInstance:\n        result = \"Cannot connect to specified host using specified username and password\"\n        sys.exit()\n    # disconnect this thing\n    atexit.register(Disconnect, serviceInstance)\n\n    vm = None\n    if args.uuid:\n        search_index = serviceInstance.content.searchIndex\n        vm = search_index.FindByUuid(None, args.uuid, True)\n    elif args.vm_name:\n        content = serviceInstance.RetrieveContent()\n        vm = get_obj(content, [vim.VirtualMachine], args.vm_name)\n\n    if vm:\n        del_nic(serviceInstance, vm, int(args.unit_number))\n    else:\n        result = \"VM not found\"\n\nmain()","top":200,"left":210,"collector":null}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":300,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":310,"linebox_arrow_left":266}},{"id":"FITEM_6","type":"switch","text":"判斷","left":0,"top":0,"config":{"calculate":[],"rules":[{"target":"FITEM_5","value1":"$(nic_no)","value2":"None","rule":"!="},{"target":"FITEM_8","value1":"$(nic_no)","value2":"None","rule":"="}],"log":true,"top":100,"left":210}},{"id":"FLINE_MW6","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_6","source_item":"FITEM_1","idcounter":6,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MW7","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_6","idcounter":7,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}},{"id":"FITEM_8","type":"inflow","text":"流程","left":0,"top":0,"config":{"error_pass":false,"log":true,"flow_name":"get_nic-no_from_vm","subflow_input":[{"require":false,"value":"$(result)","name":"$(result)","des":""},{"require":false,"value":"$(host)","name":"$(host)","des":""},{"require":false,"value":"$(port)","name":"$(port)","des":""},{"require":false,"value":"$(user)","name":"$(user)","des":""},{"require":false,"value":"$(password)","name":"$(password)","des":""},{"require":false,"value":"$(vm_name)","name":"$(vm_name)","des":""},{"require":false,"value":"$(nic_ip)","name":"$(nic_ip)","des":""},{"require":false,"value":"$(nic_mac)","name":"$(nic_mac)","des":""}],"subflow_output":[{"value":"$(result)","name":"$(result)","des":""},{"value":"$(nic_no)","name":"$(nic_no)","des":""}],"top":150,"left":360}},{"id":"FLINE_MW10","type":"line","config":{"target_side":"top","source_side":"right","target_item":"FITEM_8","source_item":"FITEM_6","idcounter":10,"linebox_left":420,"linebox_top":150,"linebox_long":0,"linebox_top_width":-90,"linebox_bottom_width":20,"linebox_arrow_top":160,"linebox_arrow_left":416}},{"id":"FLINE_MH11","type":"line","config":{"target_side":"right","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_8","idcounter":11,"linebox_left":420,"linebox_top":250,"linebox_long":0,"linebox_top_width":-90,"linebox_bottom_width":-20,"linebox_arrow_top":246,"linebox_arrow_left":330}}],"version":16777216,"uid":1600050335921},"config":{"subflow":[],"permission":[],"name":"delete_nic_from_vm","description":"","api_path":"delete-nic-from-vm","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"snapshot_operations","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":true,"value":"create","name":"action","des":"執行動作：create/remove/revert/list_all/list_current/remove_all"},{"require":false,"value":null,"name":"snapshot_name","des":"快照名稱"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":200,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(action)","name":"action","des":""},{"require":false,"value":"$(snapshot_name)","name":"snapshot_name","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n\n# Copyright 2016 Abdul Anshad <abdulanshad33@gmail.com>\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\n\"\"\"\nWritten by Abdul Anshad\nGithub: https://github.com/Abdul-Anshad-A\nEmail: abdulanshad33@gmail.com\nCredits:\nThanks to \"reuben.13@gmail.com\" for the initial code.\nNote: Example code For testing purposes only\nvSphere Python SDK program to perform snapshot operations.\n\"\"\"\n\nimport atexit\nimport sys\nimport time\nimport ssl\n\nfrom pyVmomi import vim, vmodl\nfrom pyVim.task import WaitForTask\nfrom pyVim import connect\nfrom pyVim.connect import Disconnect, SmartConnect, GetSi\n\ninputs = {'vcenter_ip': host,\n          'port': int(port),\n          'vcenter_password': password,\n          'vcenter_user': user,\n          'vm_name': vm_name,\n          # operation in 'create/remove/revert/\n          # list_all/list_current/remove_all'\n          'operation': action,\n          'snapshot_name': snapshot_name\n          }\n\ndef get_obj(content, vimtype, name):\n    \"\"\"\n     Get the vsphere object associated with a given text name\n    \"\"\"\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vimtype, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\n\ndef list_snapshots_recursively(snapshots):\n    snapshot_data = []\n    snap_text = \"\"\n    for snapshot in snapshots:\n        snap_text = \"Name: %s; Description: %s; CreateTime: %s; State: %s\" % (\n                                        snapshot.name, snapshot.description,\n                                        snapshot.createTime, snapshot.state)\n        snapshot_data.append(snap_text)\n        snapshot_data = snapshot_data + list_snapshots_recursively(\n                                        snapshot.childSnapshotList)\n    return snapshot_data\n\n\ndef get_snapshots_by_name_recursively(snapshots, snapname):\n    snap_obj = []\n    for snapshot in snapshots:\n        if snapshot.name == snapname:\n            snap_obj.append(snapshot)\n        else:\n            snap_obj = snap_obj + get_snapshots_by_name_recursively(\n                                    snapshot.childSnapshotList, snapname)\n    return snap_obj\n\n\ndef get_current_snap_obj(snapshots, snapob):\n    snap_obj = []\n    for snapshot in snapshots:\n        if snapshot.snapshot == snapob:\n            snap_obj.append(snapshot)\n        snap_obj = snap_obj + get_current_snap_obj(\n                                snapshot.childSnapshotList, snapob)\n    return snap_obj\n\n\ndef main():\n    global result\n    si = None\n\n    print(\"Trying to connect to VCENTER SERVER . . .\")\n\n    context = None\n    if hasattr(ssl, \"_create_unverified_context\"):\n        context = ssl._create_unverified_context()\n\n    si = connect.Connect(inputs['vcenter_ip'], inputs['port'],\n                         inputs['vcenter_user'], inputs[\n                             'vcenter_password'],\n                         sslContext=context)\n\n    atexit.register(Disconnect, si)\n\n    print(\"Connected to VCENTER SERVER !\")\n\n    content = si.RetrieveContent()\n\n    operation = inputs['operation']\n    vm_name = inputs['vm_name']\n\n    vm = get_obj(content, [vim.VirtualMachine], vm_name)\n\n    if not vm:\n        result = \"Virtual Machine %s doesn't exists\" % vm_name\n        sys.exit()\n\n    if operation != 'create' and vm.snapshot is None:\n        result = \"Virtual Machine %s doesn't have any snapshots\" % vm.name\n        sys.exit()\n\n    if operation == 'create':\n        snapshot_name = inputs['snapshot_name']\n        description = \"Test snapshot\"\n        dumpMemory = False\n        quiesce = False\n\n        print(\"Creating snapshot %s for virtual machine %s\" % (snapshot_name, vm.name))\n        WaitForTask(vm.CreateSnapshot(snapshot_name, description, dumpMemory, quiesce))\n\n    elif operation in ['remove', 'revert']:\n        snapshot_name = inputs['snapshot_name']\n        snap_obj = get_snapshots_by_name_recursively(\n                            vm.snapshot.rootSnapshotList, snapshot_name)\n        # if len(snap_obj) is 0; then no snapshots with specified name\n        if len(snap_obj) == 1:\n            snap_obj = snap_obj[0].snapshot\n            if operation == 'remove':\n                print(\"Removing snapshot %s\" % snapshot_name)\n                WaitForTask(snap_obj.RemoveSnapshot_Task(True))\n            else:\n                print(\"Reverting to snapshot %s\" % snapshot_name)\n                WaitForTask(snap_obj.RevertToSnapshot_Task())\n        else:\n            result = \"No snapshots found with name: %s on VM: %s\" % (snapshot_name, vm.name)\n\n    elif operation == 'list_all':\n        print(\"Display list of snapshots on virtual machine %s\" % vm.name)\n        snapshot_paths = list_snapshots_recursively(vm.snapshot.rootSnapshotList)\n        for snapshot in snapshot_paths:\n            print(snapshot)\n\n    elif operation == 'list_current':\n        current_snapref = vm.snapshot.currentSnapshot\n        current_snap_obj = get_current_snap_obj(\n                            vm.snapshot.rootSnapshotList, current_snapref)\n        current_snapshot = \"Name: %s; Description: %s; \" \\\n                           \"CreateTime: %s; State: %s\" % (\n                                current_snap_obj[0].name,\n                                current_snap_obj[0].description,\n                                current_snap_obj[0].createTime,\n                                current_snap_obj[0].state)\n        print(\"Virtual machine %s current snapshot is:\" % vm.name)\n        print(current_snapshot)\n\n    elif operation == 'remove_all':\n        print(\"Removing all snapshots for virtual machine %s\" % vm.name)\n        WaitForTask(vm.RemoveAllSnapshots())\n\n    else:\n        result = \"Specify operation should in create/remove/revert/list_all/list_current/remove_all\"\n\nmain()","top":100,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}}],"version":16777216,"uid":1600050381643},"config":{"subflow":[],"permission":[],"name":"snapshot_operations","description":"","api_path":"snapshot-operations","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"get_nic-no_from_vm","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":false,"value":null,"name":"nic_ip","des":"網卡IP，與mac二擇一"},{"require":false,"value":null,"name":"nic_mac","des":"網卡MAC，與ip二擇一"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210,"callable":false,"subflow_id":""}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"},{"value":"$(nic_no)","name":"$(nic_no)","des":"網卡編號"}],"calculate":[],"top":200,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(nic_ip)","name":"nic_ip","des":""},{"require":false,"value":"$(nic_mac)","name":"nic_mac","des":""},{"require":false,"value":null,"name":"nic_no","des":""}],"output":[{"value":"$(result)","name":"$(result)","des":""},{"value":"$(nic_no)","name":"$(nic_no)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n#\n# Written by JM Lopez\n# GitHub: https://github.com/jm66\n# Email: jm@jmll.me\n# Website: http://jose-manuel.me\n#\n# Note: Example code For testing purposes only\n#\n# This code has been released under the terms of the Apache-2.0 license\n# http://opensource.org/licenses/Apache-2.0\n#\nimport atexit\nimport requests\nfrom pyVmomi import vim\nfrom pyVim.connect import SmartConnect, Disconnect\nimport ssl\nimport re\n\n# disable  urllib3 warnings\nif hasattr(requests.packages.urllib3, 'disable_warnings'):\n    requests.packages.urllib3.disable_warnings()\n\nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vmname = vm_name\n    ip = nic_ip\n    mac = nic_mac if re.match(\"..:..:..:..:..:..\",nic_mac) else \"\"\n    \ndef get_obj(content, vim_type, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vim_type, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\ndef main():\n    global nic_no\n    args = get_args()\n    \n    if hasattr(ssl, '_create_unverified_context'):\n        context = ssl._create_unverified_context()\n    # connect to vc\n    si = SmartConnect(\n        host=args.host,\n        user=args.user,\n        pwd=args.password,\n        port=args.port,\n        sslContext=context)\n    # disconnect vc\n    atexit.register(Disconnect, si)\n\n    content = si.RetrieveContent()\n    message = 'Searching for VM {}'.format(args.vmname)\n    vm_obj = get_obj(content, [vim.VirtualMachine], args.vmname)\n    \n    if vm_obj:\n        \n        if args.ip and not args.mac:\n            guest = vm_obj.guest\n            for nic in guest.net:\n                print(nic)\n                if args.ip in nic.ipAddress:\n                    args.mac = nic.macAddress\n                    break\n            \n        if args.mac:\n            hardware = vm_obj.config.hardware.device\n            for d in hardware:\n                #print(d)\n                if hasattr(d, 'macAddress') and d.macAddress==args.mac:\n                    nic_no = re.findall('Network adapter (\\d+)',d.deviceInfo.label)[0]\n\n        #summary = vm_obj.summary\n    else:\n        result = \"VM not found\"\n\n\nmain()","top":100,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}}],"version":16777216,"uid":1600151963685},"config":{"subflow":[],"permission":[],"name":"get_nic-no_from_vm","description":"","api_path":"get-nic-no-from-vm","fp_show":true,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":true,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"},{"flow_name":"vm_capacity","description":"","flowobject":{"flow_item_counter":5,"flow_line_counter":5,"form_object":{"form_item_counter":0,"form_box_counter":0,"user":[],"group":[],"level":[],"title":false,"status":[],"op1":[],"op2":[],"items":[]},"is_sub":false,"subflow":[],"items":[{"id":"FITEM_1","type":"start","text":"開始","left":0,"top":0,"config":{"error_pass":false,"load_balance":false,"input":[{"require":false,"value":"success","name":"result","des":""},{"require":true,"value":null,"name":"host","des":"vCenter domain/IP"},{"require":true,"value":"443","name":"port","des":"vCenter Port"},{"require":true,"value":null,"name":"user","des":"vCenter 登入帳號"},{"require":false,"value":null,"name":"password","des":"vCenter 登入密碼"},{"require":true,"value":null,"name":"vm_name","des":"vCenter VM名稱"},{"require":false,"value":null,"name":"cpu","des":"指定 CPU 數量"},{"require":false,"value":null,"name":"ram","des":"指定 RAM 容量 (GB)"}],"output":[],"subflow_input":[],"subflow_output":[],"top":0,"left":210}},{"id":"FITEM_4","type":"end","text":"結束","left":0,"top":0,"config":{"output":[{"value":"$(result)","name":"$(result)","des":"執行結果：success / <錯誤訊息>"}],"calculate":[],"top":200,"left":210}},{"id":"FITEM_5","type":"python","text":"執行","left":0,"top":0,"config":{"autoinstall":true,"error_pass":false,"load_balance":false,"log":true,"input":[{"require":false,"value":"$(result)","name":"result","des":""},{"require":false,"value":"$(host)","name":"host","des":""},{"require":false,"value":"$(port)","name":"port","des":""},{"require":false,"value":"$(user)","name":"user","des":""},{"require":false,"value":"$(password)","name":"password","des":""},{"require":false,"value":"$(vm_name)","name":"vm_name","des":""},{"require":false,"value":"$(cpu)","name":"cpu","des":""},{"require":false,"value":"$(ram)","name":"ram","des":""},{"require":false,"value":null,"name":"disk_no","des":"指定 DISK編號"},{"require":false,"value":null,"name":"disk","des":"指定 DISK容量 (GB)"}],"output":[{"value":"$(result)","name":"$(result)","des":""}],"calculate":[],"code":"#!/usr/bin/env python\n#\n# Written by JM Lopez\n# GitHub: https://github.com/jm66\n# Email: jm@jmll.me\n# Website: http://jose-manuel.me\n#\n# Note: Example code For testing purposes only\n#\n# This code has been released under the terms of the Apache-2.0 license\n# http://opensource.org/licenses/Apache-2.0\n#\nimport atexit\nimport requests\nfrom pyVmomi import vim\nfrom pyVim.connect import SmartConnect, Disconnect\nimport ssl\nimport re\n\n# disable  urllib3 warnings\nif hasattr(requests.packages.urllib3, 'disable_warnings'):\n    requests.packages.urllib3.disable_warnings()\n   \nclass get_args:\n    host = host\n    port = int(port)\n    user = user\n    password = password\n    vmname = vm_name\n    cpu = cpu if cpu.isdigit() else \"\"\n    ram = ram if ram.isdigit() else \"\"\n    disk_no = disk_no if disk_no.isdigit() else \"\"\n    disk = disk if disk.isdigit() else \"\"\n\ndef get_obj(content, vim_type, name):\n    obj = None\n    container = content.viewManager.CreateContainerView(\n        content.rootFolder, vim_type, True)\n    for c in container.view:\n        if c.name == name:\n            obj = c\n            break\n    return obj\n\ndef main():\n    global result\n    args = get_args()\n\n    if hasattr(ssl, '_create_unverified_context'):\n        context = ssl._create_unverified_context()\n    # connect to vc\n    si = SmartConnect(\n        host=args.host,\n        user=args.user,\n        pwd=args.password,\n        port=args.port,\n        sslContext=context)\n    # disconnect vc\n    atexit.register(Disconnect, si)\n\n    content = si.RetrieveContent()\n    vm_obj = get_obj(content, [vim.VirtualMachine], args.vmname)\n    \n    if vm_obj:\n        spec = vim.vm.ConfigSpec()\n        if args.cpu:\n            spec.numCPUs = int(args.cpu)\n            spec.cpuHotRemoveEnabled = True\n            spec.cpuHotAddEnabled = True\n            \n        if args.ram:\n            spec.memoryMB = int(args.ram) * 1024\n            spec.memoryMB = 2 * 1024\n            spec.memoryHotAddEnabled = True\n            #limite_memory = vim.ResourceAllocationInfo()\n            #limite_memory.limit = (args.ram * 1024)\n            #spec.memoryAllocation = limite_memory\n\n        if args.disk_no and args.disk:        \n            for dev in vm_obj.config.hardware.device:\n                if hasattr(dev.backing, 'fileName'):\n                    if dev.deviceInfo.label == \"Hard disk \"+args.disk_no:\n                        #print(\"Hard disk \"+args.disk_no)\n                        capacity_in_kb = dev.capacityInKB\n                        new_disk_kb = int(args.disk) * 1024 * 1024\n                        if new_disk_kb > capacity_in_kb:\n                            dev.capacityInBytes = new_disk_kb\n                            devSpec = vim.vm.device.VirtualDeviceSpec(device=dev, operation=\"edit\")\n                            spec.deviceChange.append(devSpec)\n                        break\n\n        task = vm_obj.ReconfigVM_Task(spec=spec)\n    else:\n        result = \"VM not found\"\n\nmain()","top":100,"left":210,"collector":null}},{"id":"FLINE_MW4","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_5","source_item":"FITEM_1","idcounter":4,"linebox_left":270,"linebox_top":100,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":110,"linebox_arrow_left":266}},{"id":"FLINE_MW5","type":"line","config":{"target_side":"top","source_side":"bottom","target_item":"FITEM_4","source_item":"FITEM_5","idcounter":5,"linebox_left":270,"linebox_top":200,"linebox_long":0,"linebox_top_width":20,"linebox_bottom_width":-20,"linebox_arrow_top":210,"linebox_arrow_left":266}}],"version":16777216,"uid":1600327973566},"config":{"subflow":[],"permission":[],"name":"vm_capacity","description":"","api_path":"vm-capacity","fp_show":false,"attachment":false,"relation":false,"worklog":false,"history":false,"mission":false,"flowlog":false,"api":true,"title_field":0,"status_field":0,"display_field":0,"search_field":0},"flow_app_id__app_name":"vmware應用"}]}]